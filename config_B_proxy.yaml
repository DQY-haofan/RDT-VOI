# ============================================================================
# RDT-VoI Configuration - SCENARIO B: COMPUTE / ROBUSTNESS
# 场景 B：算力/鲁棒性对比 - 凸显 MI 作为可扩展代理
#
# 核心特征：
#   - 低 DDI (0.10): 决策敏感度低
#   - 对称/弱不对称代价 (FN:FP = 1:1): 误判代价相当
#   - 密集候选池 (60%): 充足的选点空间
#   - 无行动限制: 可维护任意数量位置
#   - 更大预算范围: 测试规模效应
#
# 预期结果：MI 的"时间-损失"效率更优，错配鲁棒性更强
# ============================================================================

experiment:
  name: "rdt_voi_B_proxy"
  seed: 42
  output_dir: "results/B_proxy"

# ----------------------------------------------------------------------------
# Numerical Settings
# ----------------------------------------------------------------------------
numerics:
  linear_solver_tol: 1.0e-8
  cholesky_nugget: 1.0e-6
  pcg_max_iter: 500
  logdet_method: "cholmod"

# ----------------------------------------------------------------------------
# Spatial Domain (20x20 网格，总 400 像元)
# ----------------------------------------------------------------------------
geometry:
  mode: "grid2d"
  nx: 20
  ny: 20
  h: 5.0

# ----------------------------------------------------------------------------
# Prior Distribution (GMRF/SPDE) - 相同的先验设定
# ----------------------------------------------------------------------------
prior:
  nu: 1.0
  kappa: 0.10
  sigma2: 0.30
  alpha: 2
  beta: 1.0e-6
  mu_prior_mean: 2.2
  mu_prior_std: 0.3

  beta_base: 5.0
  beta_hot: 1.0e-4

  hotspots:
    - center_m: [25, 75]
      radius_m: 20
    - center_m: [75, 25]
      radius_m: 25
    - center_m: [50, 50]
      radius_m: 15

# ----------------------------------------------------------------------------
# Sensor Pool Configuration - 🔥 密集池（60%）
# ----------------------------------------------------------------------------
sensors:
  types:
    - name: smartphone
      noise_std: 0.50
      cost_gbp: 30
      footprint: point

    - name: "basic_point"
      noise_std: 0.15
      cost_gbp: 150
      footprint: "point"

    - name: "laser_profiler"
      noise_std: 0.05
      cost_gbp: 800
      footprint: "point"

    - name: photogrammetry
      noise_std: 0.25
      cost_gbp: 100
      footprint: avg3x3

    - name: "vehicle_avg"
      noise_std: 0.35
      cost_gbp: 100
      footprint: "avg5x5"

    - name: inertial_profiler
      noise_std: 0.15
      cost_gbp: 300
      footprint: avg3x3

  pool_strategy: "grid_subsample"
  pool_fraction: 0.60  # 🔥 密集池：240 个候选位置（400×0.6）
  type_mix: [0.15, 0.20, 0.10, 0.20, 0.15, 0.20]

  use_heterogeneous: true
  cost_zones:
    - center_m: [100, 100]
      radius_m: 50
      cost_multiplier: 1.5
      noise_multiplier: 0.8
      allowed_types: ['inertial_profiler', 'photogrammetry']

# ----------------------------------------------------------------------------
# Decision Model - 🔥 低风险/对称代价参数
# ----------------------------------------------------------------------------
decision:
  tau_iri: null
  tau_quantile: 0.65  # 🔥 低分位阈值，降低 DDI

  # 🔥 对称代价比 (1:1) - 也可改为 1.5:1
  L_FP_gbp: 5000.0      # 误报成本
  L_FN_gbp: 5000.0      # 🔥 漏检成本（对称）
  L_TP_gbp: 800.0       # 正确维护成本
  L_TN_gbp: 0.0

  target_ddi: 0.10      # 🎯 目标 DDI: 10%（低决策敏感度）
  K_action: null        # 🔥 无行动限制

# ----------------------------------------------------------------------------
# Sensor Selection Methods - 🔥 宽预算范围
# ----------------------------------------------------------------------------
selection:
  methods:
    - greedy_mi
    - greedy_evi
    - greedy_aopt
    - maxmin
    - uniform
    - random

  budget_type: "count"
  budgets: [5, 10, 20, 40]  # 🔥 加大预算段，测试规模效应

  greedy_mi:
    batch_size: 1
    adaptive_pruning: true
    prune_threshold: 0.20  # 🔥 更激进裁剪，提高单位时间收益
    use_cost: true

  greedy_aopt:
    n_probes: 32
    use_cost: true

  greedy_evi:
    n_y_samples: 0        # 🔥 解析法
    use_cost: true
    mi_prescreen: true
    keep_fraction: 0.25   # 🔥 统一较小预筛（公平对比）

  maxmin:
    use_cost: true

# ----------------------------------------------------------------------------
# Expected Value of Information - 🔥 适度降采样（模拟算力受限）
# ----------------------------------------------------------------------------
evi:
  compute_for: ["greedy_mi", "greedy_evi"]
  method: "monte_carlo"
  monte_carlo_samples: 16  # 🔥 16 样本：在算力受限场景

# ----------------------------------------------------------------------------
# Cross-Validation
# ----------------------------------------------------------------------------
cv:
  scheme: "spatial_block"
  k_folds: 3
  buffer_width_multiplier: 1.5
  block_strategy: "kmeans"
  ensure_connected: true
  morans_permutations: 999

# ----------------------------------------------------------------------------
# Uncertainty Quantification
# ----------------------------------------------------------------------------
uq:
  bootstrap_method: "spatial_block"
  bootstrap_samples: 1000
  confidence_level: 0.95
  coverage_percentile: 90
  compute_crps: true

# ----------------------------------------------------------------------------
# Diagnostics
# ----------------------------------------------------------------------------
diagnostics:
  morans_i:
    compute: true
    permutations: 999
    alpha: 0.05

  calibration:
    pit_histogram: true
    coverage_curves: true
    reliability_diagram: true

# ----------------------------------------------------------------------------
# 🔥 Visualization - 突出 MI 的效率与鲁棒性
# ----------------------------------------------------------------------------
plots:
  save_formats: [png, pdf]
  dpi: 300
  style: "seaborn-v0_8-paper"

  budget_curves:
    metrics: ["rmse", "expected_loss_gbp", "coverage_90"]
    show_confidence: true
    confidence_level: 0.95

  performance_profile:
    tau_values: [1.0, 1.05, 1.1, 1.2, 1.5, 2.0, 3.0]
    use_budget_fold_instances: true

  critical_difference:
    alpha: 0.05
    test: "nemenyi"

  business_metrics:
    enable: true
    baseline_method: "uniform"
    show_savings: false     # 场景 B 不强调省钱
    show_roi: true
    show_cost_efficiency: true  # 🔥 强调单位时间的效率

  effect_size:
    enable: true
    plot_heatmaps: true
    plot_pairwise_table: true
    top_k_comparisons: 20

  critical_region:
    enable: false  # 低 DDI 场景不强调临界区

  expert_plots:
    enable_all: true

    marginal_efficiency:
      enable: true
      normalize_by_cost: true
      unit: "gbp_per_test_point"

    type_composition:
      enable: true
      show_cost_breakdown: true

    mi_voi_correlation:
      enable: true
      methods: ["greedy_mi", "greedy_evi"]

    calibration_plots:
      enable: true

    spatial_diagnostics:
      enable: true
      show_morans_i: true

    sensor_placement_map:
      enable: true
      budgets_to_show: [5, 10, 20, 40]

    roi_curves:
      enable: true  # 🔥 ROI 曲线：对比时间效率

    robustness_heatmap:
      enable: true  # 🔥 鲁棒性热图：测试先验错配
      ddi_range: [0.1, 0.2, 0.3, 0.4]
      loss_ratios: [1, 2, 5, 10]

    ddi_overlay:
      enable: false  # 低 DDI 场景不需要

# ----------------------------------------------------------------------------
# Acceptance Criteria
# ----------------------------------------------------------------------------
acceptance:
  m1_grid_size: 100
  m1_budgets: [5, 10, 20]
  m1_check_monotonic: true
  m1_check_diminishing: true

  m2_min_improvement_vs_random: 0.15
  m2_confidence_level: 0.95

  m3_small_instance_n: 25
  m3_small_instance_k: 5
  m3_max_suboptimality: 0.10

  m4_morans_alpha: 0.05
  m4_coverage_tolerance: 0.10
  m4_msse_tolerance: 0.25

# ============================================================================
# 场景 B 预期结果
# ============================================================================
# 1. 在统一墙钟时间下（5s/30s/120s）：
#    - MI 的"时间-损失"曲线斜率更大（单位时间降损更多）
#    - MI 在大预算段（n=40）的边际效益仍保持
#
# 2. 鲁棒性测试（先验错配 ±50% kappa）：
#    - MI 的性能波动更小（Cliff's Delta < 0.2）
#    - EVI 对先验错配更敏感
#
# 3. 损失差距：
#    - EVI vs MI 的期望损失差异 < 3%（不显著）
#    - 在低 DDI 场景，VoI 的超额收益被摊薄
#
# 4. 算力统计：
#    - MI 的 CPU 时间/墙钟时间比 EVI 低 5-10 倍
#    - MI 的内存占用更稳定
# ============================================================================