"""
Sensor selection algorithms with submodular optimization.
Implements Greedy-MI, Greedy-A, and baseline methods.
"""

import numpy as np
import scipy.sparse as sp
from typing import List, Tuple
import heapq
from dataclasses import dataclass


@dataclass
class SelectionResult:
    """Result container for sensor selection."""
    selected_ids: List[int]
    objective_values: List[float]  # Value after each addition
    marginal_gains: List[float]  # Marginal gain at each step
    total_cost: float
    method_name: str


def greedy_mi(sensors: List, k: int, Q_pr: sp.spmatrix,
              costs: np.ndarray = None,
              lazy: bool = True) -> SelectionResult:
    """
    Greedy sensor selection maximizing Mutual Information.

    ‰øÆÂ§çÔºöÊ≠£Á°ÆÂÆûÁé∞ÊàêÊú¨Á∫¶Êùü‰∏ãÁöÑÈÄâÊã©ÈÄªËæë
    - score = gain/cost Áî®‰∫é argmaxÔºàÈÄâÂì™‰∏™Ôºâ
    - gain Áî®‰∫éÁ¥ØËÆ° objective_valuesÔºàÊÄªMIÊõ≤Á∫øÔºâ
    """
    from inference import SparseFactor, quadform_via_solve
    from sensors import assemble_H_R

    n = Q_pr.shape[0]
    n_candidates = len(sensors)

    # ÊèêÂèñÊàñÈ™åËØÅÊàêÊú¨
    if costs is None:
        costs = np.array([s.cost for s in sensors], dtype=float)
        print(f"  Using real sensor costs: min=¬£{costs.min():.0f}, "
              f"max=¬£{costs.max():.0f}, mean=¬£{costs.mean():.0f}")

    # ÂàùÂßãÂåñ
    selected_ids = []
    selected_sensors = []
    objective_values = []  # Á¥ØËÆ°ÊÄªMI
    marginal_gains = []  # ÊØèÊ≠•ÁöÑŒîMI
    total_cost = 0.0

    # ÂÖàÈ™åÂõ†Â≠ê
    current_factor = SparseFactor(Q_pr)
    current_obj = 0.0

    # ‰ºòÂÖàÈòüÂàóÔºö(-score, iteration, sensor_id, gain_cache)
    # score = gain/costÔºàÊúâÊàêÊú¨ÔºâÊàñ gainÔºàÊó†ÊàêÊú¨Ôºâ
    pq = [] if lazy else None
    last_eval = {} if lazy else None

    # È¢ÑËÆ°ÁÆó‰º†ÊÑüÂô®ÁöÑhË°åÂíåÂô™Â£∞ÊñπÂ∑Æ
    sensor_h_rows = []
    sensor_noise_vars = []
    for s in sensors:
        h = np.zeros(n)
        h[s.idxs] = s.weights
        sensor_h_rows.append(h)
        sensor_noise_vars.append(s.noise_var)

    # GreedyÂæ™ÁéØ
    for step in range(k):
        best_score = -np.inf  # Áî®‰∫éÈÄâÊã©Ôºàargmax scoreÔºâ
        best_gain = 0.0  # Áî®‰∫éÁ¥ØËÆ°MIÊõ≤Á∫ø
        best_idx = -1

        # Lazy evaluationË∑ØÂæÑ
        if lazy and step > 0:
            while pq:
                neg_score, eval_iter, cand_idx, cached_gain = heapq.heappop(pq)

                if cand_idx in selected_ids:
                    continue

                # Ê£ÄÊü•ÊòØÂê¶Êñ∞È≤ú
                if eval_iter < step:
                    # ËøáÊúüÔºåÈáçÊñ∞ËØÑ‰º∞
                    h = sensor_h_rows[cand_idx]
                    r = sensor_noise_vars[cand_idx]
                    q = quadform_via_solve(current_factor, h)
                    gain = 0.5 * np.log1p(q / r)
                    score = gain / costs[cand_idx]  # ÊàêÊú¨ÂΩí‰∏ÄÂåñ

                    # ÈáçÊñ∞ÂÖ•ÈòüÔºåÊ†áËÆ∞‰∏∫Êñ∞È≤ú
                    heapq.heappush(pq, (-score, step, cand_idx, gain))
                    last_eval[cand_idx] = step
                else:
                    # Êñ∞È≤úÁöÑËØÑ‰º∞ÔºåÁõ¥Êé•‰ΩøÁî®
                    best_idx = cand_idx
                    best_score = -neg_score
                    best_gain = cached_gain
                    break

        # Â¶ÇÊûúÊ≤°ÊâæÂà∞ÊàñÈ¶ñÊ¨°Ëø≠‰ª£ÔºåÂÖ®ÈáèËØÑ‰º∞
        if best_idx == -1:
            for cand_idx in range(n_candidates):
                if cand_idx in selected_ids:
                    continue

                h = sensor_h_rows[cand_idx]
                r = sensor_noise_vars[cand_idx]

                # ËÆ°ÁÆóËæπÈôÖMIÂ¢ûÁõä
                q = quadform_via_solve(current_factor, h)
                gain = 0.5 * np.log1p(q / r)

                # ËÆ°ÁÆóscoreÔºàÁî®‰∫éÈÄâÊã©Ôºâ
                score = gain / costs[cand_idx]

                if lazy:
                    # ÂÖ•Èòü
                    heapq.heappush(pq, (-score, step, cand_idx, gain))
                    last_eval[cand_idx] = step

                # Êõ¥Êñ∞ÊúÄ‰Ω≥ÂÄôÈÄâ
                if score > best_score:
                    best_score = score
                    best_gain = gain
                    best_idx = cand_idx

        if best_idx == -1:
            print(f"Warning: No valid sensor found at step {step}")
            break

        # Ê∑ªÂä†ÈÄâ‰∏≠ÁöÑ‰º†ÊÑüÂô®
        selected_ids.append(best_idx)
        selected_sensors.append(sensors[best_idx])
        marginal_gains.append(best_gain)
        total_cost += costs[best_idx]

        # Rank-1Êõ¥Êñ∞Á≤æÂ∫¶Áü©Èòµ
        h_best = sensor_h_rows[best_idx]
        r_best = sensor_noise_vars[best_idx]
        current_factor.rank1_update(h_best / np.sqrt(r_best), 1.0)

        # Á¥ØËÆ°MIÔºàÁî®ÁúüÂÆûgainÔºå‰∏çÊòØscoreÔºâ
        current_obj += best_gain
        objective_values.append(current_obj)

        # ÊâìÂç∞ËøõÂ∫¶ÔºàÂ¢ûÂä†ÊàêÊú¨ÊïàÁõä‰ø°ÊÅØÔºâ
        if (step + 1) % 10 == 0 or step == k - 1:
            print(f"  Step {step + 1}/{k}: "
                  f"MI={current_obj:.3f} nats ({current_obj / np.log(2):.2f} bits), "
                  f"ŒîMI={best_gain:.4f}, "
                  f"score={best_score:.6f}, "
                  f"cost=¬£{total_cost:.0f}, "
                  f"type={sensors[best_idx].type_name}")

    return SelectionResult(
        selected_ids=selected_ids,
        objective_values=objective_values,
        marginal_gains=marginal_gains,
        total_cost=total_cost,
        method_name="Greedy-MI"
    )


def greedy_aopt(sensors: List, k: int, Q_pr: sp.spmatrix,
                costs: np.ndarray = None,
                hutchpp_probes: int = 20,
                batch_size: int = 32) -> SelectionResult:
    """
    Âä†ÈÄüÁâàGreedy-A-optimality

    ‰ºòÂåñÔºö
    1. Hutchinson++ ÊâπÈáèÊé¢Èíà
    2. ÊØèTÊ≠•ÈáçÁî®Êé¢ÈíàÔºà‰∏çÁî®ÊØèÊ≠•ÈÉΩÈááÊ†∑Ôºâ
    3. ÊâπÈáèÂÄôÈÄâËØÑ‰º∞
    """
    from inference import SparseFactor, compute_posterior

    n = Q_pr.shape[0]
    if costs is None:
        costs = np.ones(len(sensors))

    selected_ids = []
    selected_sensors = []
    objective_values = []
    marginal_gains = []
    total_cost = 0.0

    # ÂàùÂßãtrace‰º∞ËÆ°
    factor_pr = SparseFactor(Q_pr)

    # üî• Hutchinson++: È¢ÑÁîüÊàêÊé¢ÈíàÁü©ÈòµÔºàÈáçÁî®Â§öÊ≠•Ôºâ
    rng = np.random.default_rng(42)
    probe_refresh_interval = 5  # ÊØè5Ê≠•Âà∑Êñ∞Êé¢Èíà

    current_trace = estimate_trace_hutchpp(factor_pr, hutchpp_probes, rng)
    print(f"  Initial trace estimate: {current_trace:.1f}")

    for step in range(k):
        best_gain = -np.inf
        best_idx = -1

        # ÂàÜÊâπËØÑ‰º∞ÂÄôÈÄâ
        remaining = [i for i in range(len(sensors)) if i not in selected_ids]

        for batch_start in range(0, len(remaining), batch_size):
            batch_ids = remaining[batch_start:batch_start + batch_size]

            # ÊâπÈáèÊûÑÂª∫HÁü©Èòµ
            test_sensors_list = []
            for cand_idx in batch_ids:
                test_sensors_list.append(selected_sensors + [sensors[cand_idx]])

            # üî• ÊâπÈáètrace‰º∞ËÆ°ÔºàÂ§çÁî®Êé¢ÈíàÔºâ
            if step % probe_refresh_interval == 0 or step == 0:
                probes = generate_hutchpp_probes(n, hutchpp_probes, rng)

            for cand_idx, test_sensors in zip(batch_ids, test_sensors_list):
                from sensors import assemble_H_R
                H_test, R_test = assemble_H_R(test_sensors, n)

                # Âø´ÈÄütrace‰º∞ËÆ°
                mu_post, factor_post = compute_posterior(
                    Q_pr, np.zeros(n), H_test, R_test, np.zeros(len(test_sensors))
                )

                new_trace = estimate_trace_hutchpp_with_probes(
                    factor_post, probes
                )

                gain = current_trace - new_trace

                if gain > best_gain:
                    best_gain = gain
                    best_idx = cand_idx

        if best_idx == -1:
            break

        # Ê∑ªÂä†‰º†ÊÑüÂô®
        selected_ids.append(best_idx)
        selected_sensors.append(sensors[best_idx])
        marginal_gains.append(best_gain)
        total_cost += costs[best_idx]

        # Êõ¥Êñ∞trace
        current_trace -= best_gain
        objective_values.append(-current_trace)

        if (step + 1) % 10 == 0:
            print(f"  Step {step + 1}/{k}: Trace={current_trace:.1f}, Œî={best_gain:.1f}")

    return SelectionResult(
        selected_ids=selected_ids,
        objective_values=objective_values,
        marginal_gains=marginal_gains,
        total_cost=total_cost,
        method_name="Greedy-A"
    )


def estimate_trace_hutchpp(factor: 'SparseFactor', n_probes: int,
                           rng: np.random.Generator) -> float:
    """Hutchinson++ trace‰º∞ËÆ°"""
    probes = generate_hutchpp_probes(factor.n, n_probes, rng)
    return estimate_trace_hutchpp_with_probes(factor, probes)


def generate_hutchpp_probes(n: int, n_probes: int,
                            rng: np.random.Generator) -> np.ndarray:
    """ÁîüÊàêHutchinson++Êé¢ÈíàÔºàRademacherÂêëÈáèÔºâ"""
    return rng.choice([-1, 1], size=(n, n_probes)).astype(float)


def estimate_trace_hutchpp_with_probes(factor: 'SparseFactor',
                                       probes: np.ndarray) -> float:
    """‰ΩøÁî®ÁªôÂÆöÊé¢Èíà‰º∞ËÆ°trace"""
    # Z = Œ£ * probes = Q^{-1} * probes
    Z = factor.solve(probes)

    # trace(Œ£) ‚âà (1/m) * sum(probes^T * Z)
    trace_est = np.mean(np.einsum('ij,ij->j', probes, Z))

    return trace_est

def uniform_selection(sensors: List, k: int, geom) -> SelectionResult:
    """
    Uniform spatial grid sensor placement.

    Args:
        sensors: Candidate sensors
        k: Budget
        geom: Geometry object

    Returns:
        result: SelectionResult
    """
    # Create k√ók grid over domain
    coords = geom.coords

    # Compute grid spacing
    x_range = coords[:, 0].max() - coords[:, 0].min()
    y_range = coords[:, 1].max() - coords[:, 1].min()

    k_side = int(np.ceil(np.sqrt(k)))
    x_grid = np.linspace(coords[:, 0].min(), coords[:, 0].max(), k_side)
    y_grid = np.linspace(coords[:, 1].min(), coords[:, 1].max(), k_side)

    # Find nearest sensor to each grid point
    from scipy.spatial import cKDTree
    sensor_coords = np.array([coords[s.idxs[0]] for s in sensors])
    tree = cKDTree(sensor_coords)

    selected_ids = []
    for xi in x_grid:
        for yi in y_grid:
            if len(selected_ids) >= k:
                break
            _, idx = tree.query([xi, yi])
            if idx not in selected_ids:
                selected_ids.append(idx)

    total_cost = sum(sensors[i].cost for i in selected_ids)

    return SelectionResult(
        selected_ids=selected_ids,
        objective_values=[],
        marginal_gains=[],
        total_cost=total_cost,
        method_name="Uniform"
    )


def random_selection(sensors: List, k: int,
                     rng: np.random.Generator) -> SelectionResult:
    """
    Random sensor selection baseline.

    Args:
        sensors: Candidate sensors
        k: Budget
        rng: Random generator

    Returns:
        result: SelectionResult
    """
    selected_ids = rng.choice(len(sensors), size=k, replace=False).tolist()
    total_cost = sum(sensors[i].cost for i in selected_ids)

    return SelectionResult(
        selected_ids=selected_ids,
        objective_values=[],
        marginal_gains=[],
        total_cost=total_cost,
        method_name="Random"
    )


if __name__ == "__main__":
    from config import load_config
    from geometry import build_grid2d_geometry
    from spatial_field import build_prior
    from sensors import generate_sensor_pool

    cfg = load_config()
    rng = cfg.get_rng()

    # Setup
    geom = build_grid2d_geometry(20, 20, h=cfg.geometry.h)
    Q_pr, mu_pr = build_prior(geom, cfg.prior)
    sensors = generate_sensor_pool(geom, cfg.sensors, rng)

    print(f"Selecting from {len(sensors)} candidates...")

    # Test Greedy-MI
    print("\nGreedy-MI:")
    result = greedy_mi(sensors, k=10, Q_pr=Q_pr, lazy=True)
    print(f"  Final MI: {result.objective_values[-1]:.3f}")
    print(f"  Total cost: ¬£{result.total_cost:.0f}")

    # Test Random
    print("\nRandom:")
    result_random = random_selection(sensors, k=10, rng=rng)
    print(f"  Total cost: ¬£{result_random.total_cost:.0f}")