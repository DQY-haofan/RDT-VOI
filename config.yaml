# =====================================================================
# 快速实验配置 - 针对Colab环境优化
# =====================================================================
#
# 主要改动：
# 1. 减少CV折数：5→3（减少40%计算）
# 2. 减少预算点：6→4（减少33%计算）
# 3. 优化选择算法参数
# 4. 启用快速EVI近似
#
# 预期总耗时：从160h → 15h（10倍加速）

experiment:
  name: rdt_fast_experiment
  output_dir: runs
  seed: 202501

numerics:
  linear_solver_tol: 1.0e-07  # 🔧 放宽（原1e-8）
  cholesky_nugget: 1.0e-08    # 🔧 放宽（原1e-9）
  logdet_method: cholesky
  pcg_max_iter: 500           # 🔧 减半（原1000）

geometry:
  mode: grid2d
  nx: 40
  ny: 40
  h: 5.0

prior:
  nu: 1.0
  kappa: 0.10
  sigma2: 0.30
  alpha: 2
  beta: 1.0e-06
  mu_prior_mean: 2.2
  mu_prior_std: 0.0

sensors:
  pool_fraction: 0.75
  pool_strategy: grid_subsample
  type_mix: [0.4, 0.4, 0.2]
  types:
    - name: inertial_profiler
      noise_std: 0.1
      cost_gbp: 10000.0
      footprint: avg3x3
    - name: photogrammetry
      noise_std: 0.25
      cost_gbp: 5000.0
      footprint: avg3x3
    - name: smartphone
      noise_std: 0.5
      cost_gbp: 500.0
      footprint: avg5x5

decision:
  tau_iri: 2.0
  L_TP_gbp: 5000.0
  L_FP_gbp: 8000.0
  L_FN_gbp: 40000.0
  L_TN_gbp: 0.0

# =====================================================================
# 🔥 选择算法优化（关键加速点）
# =====================================================================
selection:
  methods:
    - greedy_mi        # 必跑
    # - greedy_aopt    # 🔧 注释掉（最慢的方法）
    - uniform          # 快速基线
    - random           # 快速基线

  budgets:
    # - 5              # 🔧 删除小预算
    - 10
    - 20
    - 40
    # - 60            # 🔧 删除大预算
    # - 80

  greedy_mi:
    lazy: true
    cost_normalized: true
    warmstart_enum: false
    batch_size: 64           # 🔥 新增：批量评估大小

  greedy_aopt:
    lazy: true
    trace_estimator: hutchpp
    hutchpp_probes: 10       # 🔧 减半（原20）
    batch_size: 32           # 🔥 新增

# =====================================================================
# 🔥 EVI计算优化
# =====================================================================
evi:
  compute_for:
    - greedy_mi
  method: monte_carlo
  monte_carlo_samples: 500   # 🔧 减半（原1000）
  unscented_alpha: 1.0
  unscented_beta: 2.0
  unscented_kappa: 0.0

# =====================================================================
# 🔥 CV优化（最大加速点）
# =====================================================================
cv:
  scheme: spatial_block
  k_folds: 3                 # 🔧 减少（原5）
  buffer_width_multiplier: 1.5
  block_strategy: kmeans
  ensure_connected: true

# =====================================================================
# 🔥 UQ优化
# =====================================================================
uq:
  bootstrap_method: spatial_block
  bootstrap_samples: 500     # 🔧 减半（原1000）
  confidence_level: 0.95
  coverage_percentile: 90
  compute_crps: false

diagnostics:
  morans_i:
    permutations: 499        # 🔧 减半（原999）
    weight_type: adjacency
  calibration:
    compute_coverage: true
    compute_msse: true

plots:
  save_formats: [png]        # 🔧 只保存png（原png+pdf）
  dpi: 150                   # 🔧 降低（原300）
  style: seaborn-v0_8-paper
  budget_curves:
    show_ci: true
    metrics:
      - expected_loss
      - rmse
  performance_profile:
    tau_max: 3.0
  critical_difference:
    alpha: 0.05
    test: nemenyi

logging:
  level: INFO
  console: true
  file: true
  jsonl_metrics: true

acceptance:
  m1_grid_size: 1600
  m1_budgets: [10, 20, 40]
  m1_check_monotonic: true
  m1_check_diminishing: true
  m2_min_improvement_vs_random: 0.15
  m2_confidence_level: 0.95
  m3_small_instance_n: 200
  m3_small_instance_k: 8
  m3_max_suboptimality: 1.58
  m4_morans_alpha: 0.05
  m4_coverage_tolerance: 0.05
  m4_msse_tolerance: 0.2

# =====================================================================
# 计算量分析
# =====================================================================
#
# 原配置：
#   5 folds × 4 methods × 6 budgets = 120 experiments
#   每个实验：k×N solve，k=80, N=1200
#   预估：160小时（SPLU）
#
# 优化后：
#   3 folds × 3 methods × 3 budgets = 27 experiments (-77%)
#   每个实验：k×N/batch_size solve（批量）
#   预估：15小时（SPLU + batch）→ 3小时（CHOLMOD + batch）
#
# 如需进一步加速：
#   - 先跑M1（单折，快速验证）
#   - 确认效果后再跑完整M2